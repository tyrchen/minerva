// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::PartialEq, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub struct SigninOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub token: ::std::string::String,
}
impl SigninOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn token(&self) -> &str {
        use std::ops::Deref;
        self.token.deref()
    }
}
impl SigninOutput {
    /// Creates a new builder-style object to manufacture [`SigninOutput`](crate::output::SigninOutput).
    pub fn builder() -> crate::output::signin_output::Builder {
        crate::output::signin_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::PartialEq, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub struct EchoMessageOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub message: ::std::string::String,
}
impl EchoMessageOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn message(&self) -> &str {
        use std::ops::Deref;
        self.message.deref()
    }
}
impl EchoMessageOutput {
    /// Creates a new builder-style object to manufacture [`EchoMessageOutput`](crate::output::EchoMessageOutput).
    pub fn builder() -> crate::output::echo_message_output::Builder {
        crate::output::echo_message_output::Builder::default()
    }
}
/// See [`SigninOutput`](crate::output::SigninOutput).
///
pub mod signin_output {

    #[derive(::std::cmp::PartialEq, ::std::fmt::Debug)]
    /// Holds one variant for each of the ways the builder can fail.
    #[non_exhaustive]
    #[allow(clippy::enum_variant_names)]
    pub enum ConstraintViolation {
        /// `token` was not provided but it is required when building `SigninOutput`.
        MissingToken,
    }
    impl ::std::fmt::Display for ConstraintViolation {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            match self {
                ConstraintViolation::MissingToken => write!(
                    f,
                    "`token` was not provided but it is required when building `SigninOutput`"
                ),
            }
        }
    }
    impl ::std::error::Error for ConstraintViolation {}
    impl ::std::convert::TryFrom<Builder> for crate::output::SigninOutput {
        type Error = ConstraintViolation;

        fn try_from(builder: Builder) -> Result<Self, Self::Error> {
            builder.build()
        }
    }
    /// A builder for [`SigninOutput`](crate::output::SigninOutput).
    #[derive(::std::clone::Clone, ::std::default::Default, ::std::fmt::Debug)]
    pub struct Builder {
        pub(crate) token: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn token(mut self, input: ::std::string::String) -> Self {
            self.token = Some(input);
            self
        }
        /// Consumes the builder and constructs a [`SigninOutput`](crate::output::SigninOutput).
        ///
        /// The builder fails to construct a [`SigninOutput`](crate::output::SigninOutput) if a [`ConstraintViolation`] occurs.
        ///
        pub fn build(self) -> Result<crate::output::SigninOutput, ConstraintViolation> {
            self.build_enforcing_all_constraints()
        }
        fn build_enforcing_all_constraints(
            self,
        ) -> Result<crate::output::SigninOutput, ConstraintViolation> {
            Ok(crate::output::SigninOutput {
                token: self.token.ok_or(ConstraintViolation::MissingToken)?,
            })
        }
    }
}
/// See [`EchoMessageOutput`](crate::output::EchoMessageOutput).
///
pub mod echo_message_output {

    #[derive(::std::cmp::PartialEq, ::std::fmt::Debug)]
    /// Holds one variant for each of the ways the builder can fail.
    #[non_exhaustive]
    #[allow(clippy::enum_variant_names)]
    pub enum ConstraintViolation {
        /// `message` was not provided but it is required when building `EchoMessageOutput`.
        MissingMessage,
    }
    impl ::std::fmt::Display for ConstraintViolation {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            match self {
                ConstraintViolation::MissingMessage => write!(f, "`message` was not provided but it is required when building `EchoMessageOutput`"),
            }
        }
    }
    impl ::std::error::Error for ConstraintViolation {}
    impl ::std::convert::TryFrom<Builder> for crate::output::EchoMessageOutput {
        type Error = ConstraintViolation;

        fn try_from(builder: Builder) -> Result<Self, Self::Error> {
            builder.build()
        }
    }
    /// A builder for [`EchoMessageOutput`](crate::output::EchoMessageOutput).
    #[derive(::std::clone::Clone, ::std::default::Default, ::std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn message(mut self, input: ::std::string::String) -> Self {
            self.message = Some(input);
            self
        }
        /// Consumes the builder and constructs a [`EchoMessageOutput`](crate::output::EchoMessageOutput).
        ///
        /// The builder fails to construct a [`EchoMessageOutput`](crate::output::EchoMessageOutput) if a [`ConstraintViolation`] occurs.
        ///
        pub fn build(self) -> Result<crate::output::EchoMessageOutput, ConstraintViolation> {
            self.build_enforcing_all_constraints()
        }
        fn build_enforcing_all_constraints(
            self,
        ) -> Result<crate::output::EchoMessageOutput, ConstraintViolation> {
            Ok(crate::output::EchoMessageOutput {
                message: self.message.ok_or(ConstraintViolation::MissingMessage)?,
            })
        }
    }
}
